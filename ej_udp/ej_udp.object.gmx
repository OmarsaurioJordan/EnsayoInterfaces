<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
depth = -room_height;
alarm[0] = 1;
alarm[2] = 1;
alarm[4] = 1;
instance_create(room_width * 0.5, room_height * 0.5, sombraedificios);
instance_create(0, 0, sombrageneral);
audio_channel_num(150);

// variables del juego
nombre = ""; // id que reconoce al usuario en la web
estilo = 0; // dos tipos de dibujos para edificios y personajes (0 o 1)
maxciclo = m_segundo * 15; // microsegundos que dura el ciclo de juego
monedas = 0; // piezas de valor del juego
ocultar = false;
// no cambiables
ciudadanos = 0; // cuantos personajes se tienen
estado = m_bonusiando; // momentos por los que pasa el juego en su ciclo
ciclo = 0; // reloj que maneja los ciclos del juego
seleccion = m_nada; // que edificio va a poner
mensaje = m_nada; // que mensaje enviaria a otro jugador
valormens = 1; // dato que se envia junto al mensaje
historia = 0; // numero de ciclos transcurridos

// variables de personajes
velcamina = 32 / m_segundo; // velocidad base de caminado
maxvida = 12; // puntos de impacto base
maxataque = 4; // maximo ataque de los fuertes
visual = 192; // campo visual base

// UDP web
m_puerto = 3456;
laip = -1; // luego pedira ip asincrono, si vacio entonces servidor
elejir = -1; // luego pedira nombre de otro jugador asincrono
enmira = ""; // guarda al ultimo jugador seleccionado
esweb = false; // sera verdadero s jugando online
master = false; // true si es el servidor
socket = -1;
remote_ip[0] = "0.0.0.0";
remote_port[0] = 0;
apodos[0] = "";
usuarios = 0;
listados = 0;
notificacion = "";
espionaje = "";

// precios edificios
valedif[0] = 0;
valedif[m_casa] = 2;
valedif[m_industria] = 3;
valedif[m_cuartel] = 4;
valedif[m_templo] = 5;

// precios envios
valenvi[0] = 0;
valenvi[m_regalo] = 1;
valenvi[m_robo] = 0.1;
valenvi[m_asedio] = 7;
valenvi[m_invasion] = 0.5;
valenvi[m_defensas] = 0.4;
valenvi[m_espias] = 3;
valenvi[m_persuacion] = 0.7;
valenvi[m_turistas] = 0.2;

// datos de conversion de ciudadaos
solporcu = 4;

s_abrir();

// pedir nombre asincrono
msg = get_string_async("Digite su Nombre", nombre);

repeat 11
{
    instance_create(room_width * 0.5, room_height * 0.5, pajaro);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// enviar apodos a todos
if esweb and master
{
    var txt;
    for (var u = 0; u &lt; usuarios; u++)
    {
        txt = "";
        for (var i = 0; i &lt; usuarios; i++)
        {
            if i &lt; m_lista
            {
                if apodos[i] == apodos[u]
                {
                    txt += "." + nombre;
                }
                else
                {
                    txt += "." + apodos[i];
                }
            }
        }
        s_envio(m_apodos, 0, txt, apodos[u]);
    }
}
alarm[4] = room_speed * 72;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// estadistic show
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// animales y matar enfermos
// crear animales salvajes al azar
if historia &gt; 9
{
    if random(1) &lt; 0.1
    {
        var dirr = irandom(359);
        var aux;
        repeat choose(1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 8)
        {
            aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_p);
            aux.tipo = m_animal;
        }
        audio_play_sound(a_animales, 11, false);
    }
}

// matar sobrepoblacion enferma
var n = 0;
with personaje_a
{
    if tipo == m_defensa or tipo == m_turista
    {
        n++;
    }
}
n = solporcu * (instance_number(bloque) + 1) - n;
if n &lt; 0
{
    n = abs(n);
    with personaje_a
    {
        if (tipo == m_defensa or tipo == m_turista) and
            n &gt; 0 and random(1) &lt; 0.25
        {
            n--;
            var mt = instance_create(x, y, muerto);
            mt.tipo = tipo;
            instance_destroy();
        }
    }
}

alarm[2] = room_speed * (60 + irandom(60));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// notificacion
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// contar poblacion
ciudadanos = instance_number(aliado);
alarm[0] = room_speed * 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// depurar segun estado del juego
switch estado
{
    case m_contando:
        ciclo = min(maxciclo, ciclo + delta_time);
        if ciclo == maxciclo
        {
            ciclo = 0;
            estado = m_bonusiando;
            audio_play_sound(a_turno, 100, false);
            historia++;
        }
    break;
    
    case m_bonusiando:
        monedas += 1 + instance_number(industria);
        var n = 0;
        with personaje_a
        {
            if tipo == m_ciudadano
            {
                n++;
            }
        }
        n = solporcu * 2 * (instance_number(casa) + 1) - n;
        with casa
        {
            if n &gt; 0
            {
                instance_create(x - 40 + irandom(80), y - 20 + irandom(40), personaje_a);
                n--;
            }
        }
        if n &gt; 0
        {
            var aux;
            if instance_exists(casa)
            {
                aux = instance_find(casa, irandom(instance_number(casa) - 1));
            }
            else if instance_exists(bloque)
            {
                aux = instance_find(bloque, irandom(instance_number(bloque) - 1));
            }
            else
            {
                aux = sombraedificios;
            }
            instance_create(aux.x - 40 + irandom(80), aux.y - 20 + irandom(40), personaje_a);
        }
        estado = m_construyendo;
    break;
    
    case m_construyendo:
        if keyboard_check_pressed(ord('S')) or mouse_wheel_up()
        {
            seleccion++;
            if seleccion &gt; m_templo { seleccion = m_nada; }
        }
        else if mouse_wheel_down()
        {
            seleccion --;
            if seleccion &lt; m_nada { seleccion = m_templo; }
        }
        else if keyboard_check_pressed(vk_space)
        {
            estado = m_enviando;
        }
        else if mouse_check_button_pressed(mb_left)
        {
            if seleccion == m_nada
            {
                estado = m_enviando;
            }
            else if mouse_x &gt; room_width * 0.2 and mouse_x &lt; room_width * 0.8 and
                mouse_y &gt; room_height * 0.22 and mouse_y &lt; room_height * 0.82
            {
                var coli = false;
                with sombraedificios
                {
                    if place_meeting(mouse_x, mouse_y, bloque)
                    {
                        coli = true;
                    }
                }
                if monedas &gt;= valedif[seleccion] and !coli
                {
                    switch seleccion
                    {
                        case m_casa: instance_create(mouse_x, mouse_y, casa); break;
                        case m_cuartel: instance_create(mouse_x, mouse_y, cuartel); break;
                        case m_industria: instance_create(mouse_x, mouse_y, industria); break;
                        case m_templo: instance_create(mouse_x, mouse_y, templo); break;
                    }
                    monedas -= valedif[seleccion];
                    control.estado = m_enviando;
                    audio_play_sound(a_poner, 30, false);
                }
            }
        }
    break;
    
    case m_enviando:
        if mouse_check_button_pressed(mb_left)
        {
            var p;
            for (var u = 0; u &lt; listados; u++)
            {
                if u &lt; m_lista
                {
                    p = room_height - (82 + u * 20);
                    if mouse_x &gt; room_width - 170 and mouse_x &lt; room_width and
                        mouse_y &gt; p - 9 and mouse_y &lt; p + 9
                    {
                        enmira = apodos[u];
                        break;
                    }
                }
            }
        }
        else if mouse_wheel_up()
        {
            mensaje++;
            if mensaje &gt; m_espias { mensaje = m_nada; }
        }
        else if mouse_wheel_down()
        {
            mensaje--;
            if mensaje &lt; m_nada { mensaje = m_espias; }
        }
        else if keyboard_check_pressed(vk_anykey)
        {
            switch keyboard_key
            {
                case ord('M'):
                    mensaje++;
                    if mensaje &gt; m_espias { mensaje = m_nada; }
                break;
                
                case ord('C'):
                    valormens *= 2;
                    if valormens &gt; 16 { valormens = 1; }
                break;
                
                case ord('Q'):
                    elejir = get_string_async("Nombre del Jugador a Enviar", enmira);
                break;
                
                case vk_enter:
                    // cobro
                    var elcosto, lacosta;
                    if mensaje == m_nada
                    {
                        lacosta = 0;
                        elcosto = 0;
                    }
                    else if mensaje != m_asedio and mensaje != m_espias
                    {
                        elcosto = valenvi[mensaje] * valormens;
                        lacosta = valormens;
                    }
                    else
                    {
                        elcosto = valenvi[mensaje];
                        lacosta = 1;
                    }
                    if monedas &gt;= elcosto and ciudadanos &gt;= lacosta
                    {
                        // enviar el mensaje por UDP
                        if esweb
                        {
                            s_envio(mensaje, valormens, nombre, enmira);
                            if mensaje != m_nada
                            {
                                audio_play_sound(a_enviando, 60, false);
                            }
                        }
                        monedas -= elcosto;
                        var num, ese;
                        repeat lacosta
                        {
                            num = instance_number(personaje_a);
                            if num &gt; 0
                            {
                                ese = noone;
                                with personaje_a
                                {
                                    if ese == noone and (tipo == m_ciudadano or tipo == m_turista or
                                        tipo == m_obrero or tipo == m_brujo)
                                    {
                                        ese = id;
                                    }
                                }
                                if ese == noone
                                {
                                    with personaje_a
                                    {
                                        if ese == noone
                                        {
                                            ese = id;
                                        }
                                    }
                                }
                                with ese { instance_destroy(); }
                            }
                        }
                        estado = m_recibiendo;
                    }
                break;
            }
        }
    break;
    
    case m_recibiendo:
        if !esweb
        {
            var aux;
            var dirr = irandom(359);
            switch mensaje
            {
                case m_robo:
                    repeat valormens
                    {
                        aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                            room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_n);
                        aux.tipo = m_ladron;
                    }
                    audio_play_sound(a_robo, 50, false);
                break;
                
                case m_regalo:
                    repeat valormens
                    {
                        aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                            room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_n);
                        aux.tipo = m_donante;
                    }
                    audio_play_sound(a_regalo, 50, false);
                break;
                
                case m_invasion:
                    repeat valormens
                    {
                        aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                            room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_p);
                        aux.tipo = m_enemigo;
                    }
                    audio_play_sound(a_invasion, 50, false);
                break;
                
                case m_persuacion:
                    repeat valormens
                    {
                        aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                            room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_n);
                        aux.tipo = m_raro;
                    }
                    audio_play_sound(a_persuacion, 50, false);
                break;
                
                case m_defensas:
                    repeat valormens
                    {
                        aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                            room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_a);
                        aux.tipo = m_defensa;
                    }
                    audio_play_sound(a_defensas, 50, false);
                break;
                
                case m_turistas:
                    repeat valormens
                    {
                        aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                            room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_a);
                        aux.tipo = m_turista;
                    }
                    audio_play_sound(a_turistas, 50, false);
                break;
                
                case m_asedio:
                    aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                        room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_p);
                    aux.tipo = m_bomba;
                    audio_play_sound(a_asedio, 50, false);
                break;
                
                case m_espias:
                    aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                        room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_n);
                    aux.tipo = m_turista;
                    notificacion = "Aqui se verian tus estadisticas...";
                    alarm[1] = room_speed * 12;
                    audio_play_sound(a_espias, 50, false);
                break;
            }
        }
        s_guardar();
        estado = m_contando;
    break;
}

// acciones generales
if keyboard_check_pressed(vk_anykey)
{
    switch keyboard_key
    {
        case vk_escape: if keyboard_check(vk_shift) { game_end(); } break;
        case vk_backspace:
            if keyboard_check(vk_shift)
            {
                with bloque { instance_destroy(); }
                with movil { instance_destroy(); }
                monedas = 0;
                historia = 0;
                estado = m_bonusiando;
                ciclo = 0;
                if file_exists("save.ini") { file_delete("save.ini"); }
                game_restart();
            }
            break;
        case vk_f4: window_set_fullscreen(!window_get_fullscreen()); break;
        case vk_tab: ocultar = !ocultar; break;
        case ord('E'): if estilo == 0 { estilo = 1; } else { estilo = 0; } break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// recibe el buffer enviado por UDP
var buf = async_load[? "buffer"];
buffer_seek(buf, buffer_seek_start, 0);

// toma los valores para empezar a depurar
var msj = buffer_read(buf, buffer_u8);
var valmsj = buffer_read(buf, buffer_u8);
var emisor = buffer_read(buf, buffer_string);
var recept = buffer_read(buf, buffer_string);
buffer_delete(buf);

// si es servidor, verifica usuario registrado y rebota mensajes
if esweb and master
{
    if msj &lt;= m_espias
    {
        if usuarios &gt; 0
        {
            var u;
            for (u = 0; u &lt; usuarios; u++)
            {
                if apodos[u] == emisor
                {
                    break;
                }
            }
            remote_port[u] = async_load[? "port"];
            remote_ip[u] = string(async_load[? "ip"]);
            apodos[u] = emisor;
            if u == usuarios
            {
                usuarios++;
            }
        }
        else
        {
            remote_port[0] = async_load[? "port"];
            remote_ip[0] = string(async_load[? "ip"]);
            apodos[0] = emisor;
            usuarios++;
        }
    }
    listados = usuarios;
    s_envio(msj, valmsj, emisor, recept);
}

if esweb and recept == nombre
{
    // depurar los tipos de mensajes
    var lacosa = "";
    var aux;
    var dirr = irandom(359);
    switch msj
    {
        case m_robo:
            lacosa = " Ladrones";
            repeat valmsj
            {
                aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                    room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_n);
                aux.tipo = m_ladron;
                aux.dequien = emisor;
            }
            audio_play_sound(a_robo, 50, false);
        break;
        
        case m_regalo:
            lacosa = " Monedas";
            repeat valmsj
            {
                aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                    room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_n);
                aux.tipo = m_donante;
                aux.dequien = emisor;
            }
            audio_play_sound(a_regalo, 50, false);
        break;
        
        case m_invasion:
            lacosa = " Atacantes";
            repeat valmsj
            {
                aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                    room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_p);
                aux.tipo = m_enemigo;
                aux.dequien = emisor;
            }
            audio_play_sound(a_invasion, 50, false);
        break;
        
        case m_persuacion:
            lacosa = " Raros";
            repeat valmsj
            {
                aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                    room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_n);
                aux.tipo = m_raro;
                aux.dequien = emisor;
            }
            audio_play_sound(a_persuacion, 50, false);
        break;
        
        case m_defensas:
            lacosa = " Defensas";
            repeat valmsj
            {
                aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                    room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_a);
                aux.tipo = m_defensa;
                aux.dequien = emisor;
            }
            audio_play_sound(a_defensas, 50, false);
        break;
        
        case m_turistas:
            lacosa = " Ciudadanos";
            repeat valmsj
            {
                aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                    room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_a);
                aux.tipo = m_turista;
                aux.dequien = emisor;
            }
            audio_play_sound(a_turistas, 50, false);
        break;
        
        case m_asedio:
            lacosa = " Explosivo";
            aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_p);
            aux.tipo = m_bomba;
            aux.dequien = emisor;
            valmsj = 1;
            audio_play_sound(a_asedio, 50, false);
        break;
        
        case m_espias:
            lacosa = " Espia";
            aux = instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_a);
            aux.tipo = m_turista;
            aux.dequien = emisor;
            valmsj = 1;
            audio_play_sound(a_espias, 50, false);
            // envia chisme datos
            var estad = nombre + ": Edi: " + string(instance_number(bloque)) +
                ", Pob: " + string(ciudadanos) + ", Din: " + string(monedas);
            s_envio(m_estadisticas, 0, estad, emisor);
        break;
        
        case m_estadisticas:
            alarm[3] = room_speed * 60;
            espionaje = emisor;
        break;
        
        case m_volvio:
            monedas += valmsj;
            instance_create(room_width * 0.5 + lengthdir_x(room_width, dirr),
                room_height * 0.5 + lengthdir_y(room_height, dirr), personaje_a);
        break;
        
        case m_apodos:
            if !master
            {
                var c;
                listados = string_count(".", emisor);
                for (var u = 0; u &lt; listados; u++)
                {
                    emisor = string_replace(emisor, ".", "");
                    apodos[u] = "";
                    while emisor != ""
                    {
                        c = string_char_at(emisor, 1);
                        if c != "."
                        {
                            apodos[u] += c;
                            emisor = string_replace(emisor, c, "");
                        }
                        else { break; }
                    }
                }
            }
        break;
    }
    
    // dibuja las notificaciones
    if msj &lt;= m_espias
    {
        alarm[1] = room_speed * 15;
        notificacion = emisor + " envia " + string(valmsj) + lacosa;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var la_id = ds_map_find_value(async_load, "id")
if la_id == msg
{
    if ds_map_find_value(async_load, "status")
    {
        nombre = s_pulename(ds_map_find_value(async_load, "result"));
    }
    if nombre == ""
    {
        nombre = string(irandom(9)) + string(irandom(9)) +
            string(irandom(9)) + string(irandom(9));
    }
    if remote_ip[0] == "0.0.0.0"
    {
        laip = get_string_async("Digite Ip Del Servidor, Ejemplo: 127.0.0.1" +
            ", Para Crear Servidor Deje Vacio, Para Modo Offline Escriba -1", "-1");
    }
    else
    {
        laip = get_string_async("Digite Ip Del Servidor, Ejemplo: 127.0.0.1" +
            ", Para Crear Servidor Deje Vacio, Para Modo Offline Escriba -1", remote_ip[0]);
    }
    msg = -1;
}
else if la_id == laip
{
    if ds_map_find_value(async_load, "status")
    {
        var txt = ds_map_find_value(async_load, "result");
        if txt == ""
        {
            // crear servidor
            socket = network_create_socket_ext(network_socket_udp, m_puerto);
            esweb = true;
            master = true;
        }
        else if txt != "-1"
        {
            // crear cliente
            socket = network_create_socket(network_socket_udp);
            remote_ip[0] = txt;
            remote_port[0] = m_puerto;
            usuarios = 1;
            s_envio(m_nada, 0, nombre, "?");
            esweb = true;
            master = false;
        }
    }
    laip = -1;
}
else if la_id == elejir
{
    if ds_map_find_value(async_load, "status")
    {
        enmira = s_pulename(ds_map_find_value(async_load, "result"));
        if enmira == nombre
        {
            enmira = "";
        }
    }
    elejir = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_guardar();
network_destroy(socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !ocultar
{
    // rectangulos blancos de fondo
    draw_set_alpha(0.5);
    draw_rectangle_colour(0, 0, 290, 350, c_white, c_white, c_white, c_white, false);
    draw_rectangle_colour(room_width - 280, 0, room_width, 120,
        c_white, c_white, c_white, c_white, false);
    draw_rectangle_colour(room_width - 600, room_height - 60, room_width, room_height,
        c_white, c_white, c_white, c_white, false);
    if estado == m_enviando
    {
        draw_rectangle_colour(room_width - 212, room_height - (60 + (listados + 1) * 20.3),
            room_width, room_height - 60, c_white, c_white, c_white, c_white, false);
    }
    draw_rectangle_colour(0, room_height - 43, 180, room_height,
        c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
    
    // textos superior izquierdo
    var txt = "Nombre: " + nombre +
        "#(E)Estilo: " + string(estilo) +
        "#Historia: " + string(historia) +
        "#MaxCiclo: " + string(maxciclo / m_segundo) + "s";
    if estado == m_contando
    {
        txt += "#Ciclo: " + string(floor((ciclo / maxciclo) * 100)) + "%";
    }
    else
    {
        txt += "#Ciclo: Tu Turno!!!";
    }
    txt += "#...#Monedas: $" + string(monedas) +
        "#Ciudadanos: " + string(ciudadanos);
    if esweb
    {
        if master { txt += "#Web: Server " + string(usuarios) + "#..."; }
        else { txt += "#Web: Client#..."; }
    }
    else
    {
        txt += "#Web: Offline#...";
    }
    if estado == m_construyendo
    {
        txt += "#(S)Seleccion: ";
        switch seleccion
        {
            case m_casa: txt += "Vivienda"; break;
            case m_cuartel: txt += "Cuartel"; break;
            case m_industria: txt += "Industria"; break;
            case m_templo: txt += "Templo"; break;
            default: txt += "..."; break;
        }
        txt += "#Precio: $" + string(valedif[seleccion]) +
            "#(Clic-Izq): Construir#(Espacio): Continuar";
    }
    else if estado == m_enviando
    {
        txt += "#(M)Mensaje: ";
        switch mensaje
        {
            case m_regalo: txt += "Regalo"; break;
            case m_robo: txt += "Robo"; break;
            case m_turistas: txt += "Turistas"; break;
            case m_persuacion: txt += "Persuacion"; break;
            case m_defensas: txt += "Defensas"; break;
            case m_invasion: txt += "Invasion"; break;
            case m_asedio: txt += "Asedio"; break;
            case m_espias: txt += "Espias"; break;
            default: txt += "..."; break;
        }
        if mensaje != m_asedio and mensaje != m_espias
        {
            txt += "#Costo: $" + string(valenvi[mensaje] * valormens);
        }
        else
        {
            txt += "#Costo: $" + string(valenvi[mensaje]);
        }
        txt += "#(C)Cantidad: " + string(valormens) + "#(Q)Quien: " + enmira +
            "#(Enter): Enviar";
    }
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_text_transformed_colour(0, 0, txt, 1.5, 1.5, 0,
        c_black, c_black, c_black, c_black, 1);
    
    // textos superior derecho
    txt = "Joda Monigotica#Omarsaurio 2019#Salir :(Escape+Mayus)" +
        "#Reset :(Borrar+Mayus)#Full-Screen :(F4)"
    draw_set_valign(fa_top);
    draw_set_halign(fa_right);
    draw_text_transformed_colour(room_width, 0, txt, 1.5, 1.5, 0,
        c_black, c_black, c_black, c_black, 1);
    
    // textos inferior derecho, notificaciones
    if alarm[1] != -1
    {
        txt = notificacion;
        if alarm[3] != -1
        {
            txt += "#" + espionaje;
        }
        else
        {
            txt += "#...";
        }
    }
    else if alarm[3] != -1
    {
        txt += "...#" + espionaje;
    }
    else
    {
        txt = "...#...";
    }
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_right);
    draw_text_transformed_colour(room_width, room_height, txt, 1.5, 1.5, 0,
        c_black, c_black, c_black, c_black, 1);
    
    // textos inferior derecho, listado de usuarios
    if estado == m_enviando
    {
        draw_set_valign(fa_middle);
        draw_set_halign(fa_right);
        var p;
        for (var u = 0; u &lt; listados; u++)
        {
            if u &lt; m_lista
            {
                p = room_height - (82 + u * 20);
                if mouse_x &gt; room_width - 170 and mouse_x &lt; room_width and
                    mouse_y &gt; p - 9 and mouse_y &lt; p + 9
                {
                    draw_text_transformed_colour(room_width, p,
                        apodos[u], 1.5, 1.5, 0,
                        c_red, c_red, c_red, c_red, 1);
                }
                else
                {
                    draw_text_transformed_colour(room_width, p,
                        apodos[u], 1.5, 1.5, 0,
                        c_black, c_black, c_black, c_black, 1);
                }
            }
        }
    }
    
    // textos inferior izquierdo
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left);
    draw_text_transformed_colour(0, room_height, "(Tab):Ocultar", 1.5, 1.5, 0,
        c_black, c_black, c_black, c_black, 1);
}
else
{
    draw_set_alpha(0.5);
    draw_rectangle_colour(0, room_height - 43, 180, room_height,
        c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
    
    // textos inferior izquierdo
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left);
    draw_text_transformed_colour(0, room_height, "(Tab):Mostrar", 1.5, 1.5, 0,
        c_black, c_black, c_black, c_black, 1);
}

// dibujar puntero
draw_sprite_ext(d_mouse, 0, mouse_x, mouse_y, 1.5, 1.5, 0, c_white, 1);
if false
{
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_right);
    draw_text_transformed_colour(mouse_x, mouse_y,
        string(mouse_x) + "," + string(mouse_y), 1, 1, 0,
        c_black, c_black, c_black, c_black, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
